https://youtube.com/shorts/eUGp9dmzAvU?feature=share

if u want structure from  structure address thenn use *
and adrees from structure use &

* - value at operator
& - address of operatror







Linked list creation and traversal

#include <stdio.h>
#include <stdlib.h>
 
struct Node
{
    int data;
    Node *next;
};
 
void linkedListTraversal(Node *ptr)
{
    while (ptr != NULL)
    {
        printf("Element: %d\n", ptr->data);
        ptr = ptr->next;
    }
}
 
int main()
{
    // Allocate memory for nodes in the linked list in Heap
    
    struct Node *head = new Node;
    struct Node *second = new Node;
    struct Node *third = new Node;
    struct Node *fourth = new Node;
 

 
    // Link first and second nodes
    head->data = 7;
    head->next = second;
 
    // Link second and third nodes
    second->data = 11;
    second->next = third;
 
    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;
 
    // Terminate the list at the third node
    fourth->data = 66;
    fourth->next = NULL;
 
    linkedListTraversal(head);
    return 0;
}


2)  Linked list Insertion of a new Element at the beginning:

#include <iostream>
using namespace std;

 
struct Node
{
    int data;
    Node *next;
};
 
void linkedListTraversal(Node *ptr)
{
    while (ptr != NULL)
    {
        cout<<"Element:" <<ptr->data<<endl;
        ptr = ptr->next;
    }
}

Node* InsertAtBeginning(Node * head, int data)
{
    Node* ptr = new Node;
    ptr->next = head;
    ptr->data = data;
    return ptr;
}

 
int main()
{
    // Allocate memory for nodes in the linked list in Heap
    
     Node *head = new Node;
 Node *second = new Node;
 Node *third = new Node;
Node *fourth = new Node;
 

 
    // Link first and second nodes
    head->data = 7;
    head->next = second;
 
    // Link second and third nodes
    second->data = 11;
    second->next = third;
 
    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;
 
    // Terminate the list at the third node
    fourth->data = 66;
    fourth->next = NULL;
 
    linkedListTraversal(head);
    head = InsertAtBeginning(head, 100);
    cout<<"After Inserting Element at the beginning:"<<endl;
    linkedListTraversal(head);
    return 0;
}

3) Linked list Insertion of a new Element at the given index : 

#include <iostream>
using namespace std;

 
struct Node
{
    int data;
    Node *next;
};
 
void linkedListTraversal(Node *ptr)
{
    while (ptr != NULL)
    {
        cout<<"Element:" <<ptr->data<<endl;
        ptr = ptr->next;
    }
}



Node* InsertAtIndex(Node * head, int data, int index)
{
    Node* ptr = new Node;
    Node* p = head;
    int i=0;
    while(i!=index-1)
    {
        p =p-> next;
        i++;
    }
    ptr->data = data;
    ptr->next = p->next;
    p->next = ptr;
    
    return head;
}

 
int main()
{
    // Allocate memory for nodes in the linked list in Heap
    
     Node *head = new Node;
 Node *second = new Node;
 Node *third = new Node;
Node *fourth = new Node;
 

 
    // Link first and second nodes
    head->data = 7;
    head->next = second;
 
    // Link second and third nodes
    second->data = 11;
    second->next = third;
 
    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;
 
    // Terminate the list at the third node
    fourth->data = 66;
    fourth->next = NULL;
    
    cout<<"Insert element at any index:"<<endl;
    InsertAtIndex(head,200,2);
    linkedListTraversal(head);
    return 0;
}


4) Insert element at the end : 

#include <iostream>
using namespace std;

 
struct Node
{
    int data;
    Node *next;
};
 
void linkedListTraversal(Node *ptr)
{
    while (ptr != NULL)
    {
        cout<<"Element:" <<ptr->data<<endl;
        ptr = ptr->next;
    }
}



Node* InsertAtlast(Node * head, int data)
{
    Node* ptr = new Node;
    Node* p = head;
    int i=0;
    while(p->next!=nullptr)
    {
        p =p-> next;
    }
    ptr->data = data;
    ptr->next = nullptr;
    p->next = ptr;
    
    return head;
}

 
int main()
{
    // Allocate memory for nodes in the linked list in Heap
    
     Node *head = new Node;
 Node *second = new Node;
 Node *third = new Node;
Node *fourth = new Node;
 

 
    // Link first and second nodes
    head->data = 7;
    head->next = second;
 
    // Link second and third nodes
    second->data = 11;
    second->next = third;
 
    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;
 
    // Terminate the list at the third node
    fourth->data = 66;
    fourth->next = NULL;
    
    cout<<"Insert element at last:"<<endl;
    InsertAtlast(head,300);
    linkedListTraversal(head);
    return 0;
}

5) Insert element after a given node:
#include <iostream>
using namespace std;

 
struct Node
{
    int data;
    Node *next;
};
 
void linkedListTraversal(Node *ptr)
{
    while (ptr != NULL)
    {
        cout<<"Element:" <<ptr->data<<endl;
        ptr = ptr->next;
    }
}



Node* InsertAfterNode(Node * head, Node *previousnode, int data)
{
    Node* ptr = new Node;
    ptr->data = data;
    
    ptr->next = previousnode->next;
    previousnode->next = ptr;
    
    return head;
}

 
int main()
{
    // Allocate memory for nodes in the linked list in Heap
    
     Node *head = new Node;
 Node *second = new Node;
 Node *third = new Node;
Node *fourth = new Node;
 

 
    // Link first and second nodes
    head->data = 7;
    head->next = second;
 
    // Link second and third nodes
    second->data = 11;
    second->next = third;
 
    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;
 
    // Terminate the list at the third node
    fourth->data = 66;
    fourth->next = NULL;
    
    cout<<"Insert element at last:"<<endl;
    InsertAfterNode(head,second,350);
    linkedListTraversal(head);
    return 0;
}

ALL CASES HOLD GOOD FOR DELETION TOO::

Deleting the first node:

#include <iostream>
using namespace std;

 
struct Node
{
    int data;
    Node *next;
};
 
void linkedListTraversal(Node *ptr)
{
    while (ptr != NULL)
    {
        cout<<"Element:" <<ptr->data<<endl;
        ptr = ptr->next;
    }
}


Node* deletefirst(Node* head)
{
    Node* ptr = new Node;
    ptr = head; 

    head = head->next;
    free(ptr);  //To remove the dynamically allocated memory.
    return head;
}

int main()
{
    // Allocate memory for nodes in the linked list in Heap
    
     Node *head = new Node;
 Node *second = new Node;
 Node *third = new Node;
Node *fourth = new Node;
 

 
    // Link first and second nodes
    head->data = 7;
    head->next = second;
 
    // Link second and third nodes
    second->data = 11;
    second->next = third;
 
    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;
 
    // Terminate the list at the third node
    fourth->data = 66;
    fourth->next = NULL;
    
    head = deletefirst(head);
    linkedListTraversal(head);
    return 0;
}

2. Deleting the elemet whose index is given:

#include <iostream>
using namespace std;

 
struct Node
{
    int data;
    Node *next;
};
 
void linkedListTraversal(Node *ptr)
{
    while (ptr != NULL)
    {
        cout<<"Element:" <<ptr->data<<endl;
        ptr = ptr->next;
    }
}


Node* deleteatindex(Node* head, int index)
{
    Node* ptr = head;
    Node* q = head->next;
    for(int i=0;i<index-1;i++)
    {
        ptr=ptr->next;
        q=q->next;
    }
    ptr->next = q->next;
    free(q);
    
    
    
    return head;
}



 
int main()
{
    // Allocate memory for nodes in the linked list in Heap
    
     Node *head = new Node;
 Node *second = new Node;
 Node *third = new Node;
Node *fourth = new Node;
 

 
    // Link first and second nodes
    head->data = 7;
    head->next = second;
 
    // Link second and third nodes
    second->data = 11;
    second->next = third;
 
    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;
 
    // Terminate the list at the third node
    fourth->data = 66;
    fourth->next = NULL;
    
    head = deleteatindex(head,2);
    linkedListTraversal(head);
    return 0;
}


3) deleting the last element:

#include <iostream>
using namespace std;

 
struct Node
{
    int data;
    Node *next;
};
 
void linkedListTraversal(Node *ptr)
{
    while (ptr != NULL)
    {
        cout<<"Element:" <<ptr->data<<endl;
        ptr = ptr->next;
    }
}


Node* deletelast(Node* head)
{
    Node* ptr = head;
    Node* q = head->next;
    while(q->next!=nullptr)
    {
        ptr=ptr->next;
        q=q->next;
    }
    ptr->next = nullptr;
    free(q);
    
    
    
    return head;}



 
int main()
{
    // Allocate memory for nodes in the linked list in Heap
    
     Node *head = new Node;
 Node *second = new Node;
 Node *third = new Node;
Node *fourth = new Node;
 

 
    // Link first and second nodes
    head->data = 7;
    head->next = second;
 
    // Link second and third nodes
    second->data = 11;
    second->next = third;
 
    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;
 
    // Terminate the list at the third node
    fourth->data = 66;
    fourth->next = NULL;
    
    head = deletelast(head);
    linkedListTraversal(head);
    return 0;
}


4) deleting a node with a given value

#include <iostream>
using namespace std;

 
struct Node
{
    int data;
    Node *next;
};
 
void linkedListTraversal(Node *ptr)
{
    while (ptr != NULL)
    {
        cout<<"Element:" <<ptr->data<<endl;
        ptr = ptr->next;
    }
}


Node* deleteatgivenvalue(Node* head, int value)
{
    Node* ptr = head;
    Node* q = head->next;
    while(q->data!= value && q->next!=nullptr)
    {
        ptr=ptr->next;
        q=q->next;
    }
    
    if(q->data == value)
    {
        ptr->next = q->next;
        free(q);
    }
    
    return head;
}



 
int main()
{
    // Allocate memory for nodes in the linked list in Heap
    
 Node *head = new Node;
 Node *second = new Node;
 Node *third = new Node;
Node *fourth = new Node;
 

 
    // Link first and second nodes
    head->data = 7;
    head->next = second;
 
    // Link second and third nodes
    second->data = 11;
    second->next = third;
 
    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;
 
    // Terminate the list at the third node
    fourth->data = 66;
    fourth->next = NULL;
    
    head = deleteatgivenvalue(head,11);
    linkedListTraversal(head);
    return 0;
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

I)Circluar Linked List

1_) Add element and traversal :: 

#include <iostream>
using namespace std;

 
struct Node
{
    int data;
    Node *next;
};
 
void CircularLinkedListTraversal(Node *head)
{
    Node* ptr = head;
    
    cout<<"Element:"<<ptr->data<<endl;
    ptr = ptr-> next;
    while (ptr!= head)
    {
        cout<<"Element:" <<ptr->data<<endl;
        ptr = ptr->next;
    }
}

int main()

{
    // Allocate memory for nodes in the linked list in Heap

Node *head = new Node;
 Node *second = new Node;
 Node *third = new Node;
Node *fourth = new Node;
 

 
    // Link first and second nodes
    head->data = 7;
    head->next = second;
 
    // Link second and third nodes
    second->data = 11;
    second->next = third;
 
    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;
 
    // Terminate the list at the third node
    fourth->data = 66;
    fourth->next = head;
    
   // head = deleteatgivenvalue(head,11);
    CircularLinkedListTraversal(head);
    return 0;
}

one more way: using do while loop :: ->

#include <iostream>
using namespace std;

 
struct Node
{
    int data;
    Node *next;
};
 
void CircularLinkedListTraversal(Node *head)
{
    Node* ptr = head;

    
    do
    {
        cout<<"Element:" <<ptr->data<<endl;
        ptr = ptr->next;
    }while (ptr!= head);
}

int main()

{
    // Allocate memory for nodes in the linked list in Heap

Node *head = new Node;
 Node *second = new Node;
 Node *third = new Node;
Node *fourth = new Node;
 

 
    // Link first and second nodes
    head->data = 7;
    head->next = second;
 
    // Link second and third nodes
    second->data = 11;
    second->next = third;
 
    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;
 
    // Terminate the list at the third node
    fourth->data = 66;
    fourth->next = head;
    
   // head = deleteatgivenvalue(head,11);
    CircularLinkedListTraversal(head);
    return 0;
}



Insert element at beginning::
#include <iostream>
using namespace std;

 
struct Node
{
    int data;
    Node *next;
};
 
void CircularLinkedListTraversal(Node *head)
{
    Node* ptr = head;
    do
    {
        cout<<"Element:" <<ptr->data<<endl;
        ptr = ptr->next;
    }while (ptr!= head);
}


Node* InsertAtBeginning(Node* head, int data)
{
    Node* ptr = new Node;
    ptr->data = data;
    
    Node* p = head->next;
    while(p->next!= head)
    {
        p = p->next;
    }
    
    p->next = ptr;
    ptr->next = head;
    return ptr;
    
}

int main()

{
    // Allocate memory for nodes in the linked list in Heap

Node *head = new Node;
 Node *second = new Node;
 Node *third = new Node;
Node *fourth = new Node;
 

 
    // Link first and second nodes
    head->data = 7;
    head->next = second;
 
    // Link second and third nodes
    second->data = 11;
    second->next = third;
 
    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;
 
    // Terminate the list at the third node
    fourth->data = 66;
    fourth->next = head;
    
    head = InsertAtBeginning(head,111);
    CircularLinkedListTraversal(head);
    return 0;
}


------------------------------------------------------------------------------------------------------------------

Doubly linked LIst::
#include <iostream>
using namespace std;

 
struct Node
{
    int data;
    Node *next;
    Node *previous;
};
 
void DoublyLinkedListTraversal(Node *ptr)
{
    while(ptr!=NULL)
    {
        cout<<"Element:" <<ptr->data<<endl;
        ptr = ptr->next;
    }
}



int main()

{
    // Allocate memory for nodes in the linked list in Heap

Node *head = new Node;
 Node *second = new Node;
 Node *third = new Node;
Node *fourth = new Node;
 

 
    // Link first and second nodes
   // head->previous = NULL;
    head->data = 7;
    head->next = second;
 
    // Link second and third nodes
    //second->previous = head;
    second->data = 11;
    second->next = third;
 
    // Link third and fourth nodes
   // third->previous = second;
    third->data = 41;
    third->next = fourth;
 
    // Terminate the list at the third node
    //fourth->previous = third;
    fourth->data = 66;
    fourth->next = NULL;
    
  //  head = InsertAtBeginning(head,111);
    DoublyLinkedListTraversal(head);

    return 0;
}

------------------------------------------------------------------------------------------------------------------

ALLL OPERATIONS::

#include <iostream>
using namespace std;

struct Node
{
  int data;
  Node* next;
};

void traversal(Node* ptr)
{
    while(ptr!=NULL)
    {
        cout<<ptr->data<<endl;
        ptr = ptr->next;
    }
}


Node* Insertatbegiining(Node* head, int data)
{
       if(head == NULL)
    {
        return 0;
    }
    Node* x = new Node;
    
    x->data = data;
    x->next = head;
    head = x;
    
    return head;
 
}

Node* InsertAtIndex(Node * ppp, int data, int index)
{
    Node* ptr = new Node;
    Node* p = ppp;
    int i=0;
    while(i!=index-1)
    {
        p =p-> next;
        i++;
    }
    ptr->data = data;
    ptr->next = p->next;
    p->next = ptr;
    
    return ppp;
}

Node* Insertend(Node*ptr, int val)
{
    Node* p = new Node;
    Node*a = ptr;
    Node* b;
    b = a->next;
    while(b!=NULL)
    {
        b=b->next;
        a=a->next;
    }
    p->data = val;
    a->next = p;
    p->next = NULL;
    
    return ptr;
}

Node* deletefront(Node* head)
{
    Node* p = head;
   // Node* q = p->next;
   head = p->next;
    //head = q;
    free(p);
    return head;
}

Node* deletelast(Node* head)
{
    Node* p = head;
    Node* q;
    q = p->next;
    while(q->next!=NULL)
    {
        q=q->next;
        p=p->next;
    }
    p->next = NULL;;
    free(q);
    return head;
    
}

Node* deletevalue(Node* head, int val)
{
    Node* ptr = head;
    Node* p = ptr->next;
    while(p->data!=val)
    {
        p=p->next;
        ptr=ptr->next;
    }
    ptr->next = p->next;
    free (p);
    return head;
}

Node* deleteindex(Node*head, int index)
{
    Node* ptr = head;
    Node* p = ptr->next;
    int i = 0;
    while(i!=index-1)
    {
        ptr=ptr->next;
        p=p->next;
        i++;
    }
    ptr->next = p->next;
    free(p);
    return head;
}

void cirtraversal(Node*head)
{
    Node* ptr= head;
    do{
        cout<<ptr->data<<endl;
        ptr = ptr->next;
        }while(ptr!=head);
}


Node* cirinsertlast(Node*head, int val)
{
    Node*p = new Node;
    Node* s = head->next;
    while(s->next!=head){
        s=s->next;
    }
    s->next = p;
    p->data = val;
    p->next = head;
    return head;
    
}

Node* cirinsertathead(Node* head, int val)
{
    Node*p = new Node;
    Node* q= head->next;
    p->data = val;
    p->next = head;

    while(q->next!=head){
        q=q->next;
        //q=q->next;
    }
    q->next = p;
    head = p;
    return head;
}


Node* cirinsertindex(Node* head, int val, int index)
{
    Node* ptr = new Node;
    Node* p = head;
    int i =0;
    while(i!=index-1)
    {
        p=p->next;
        i++;
    }
    ptr->data = val;
    ptr->next = p->next; // order matters comes first::
    p->next = ptr;       // comes second::
    return head;
}


Node* cirinsertafterval(Node* head, Node* previous, int val)
{
    Node* ptr = new Node;
    ptr->data = val;
    
    ptr->next = previous->next;
    previous->next = ptr;
    return head;
}

Node* cirdeletehead(Node* head)
{
    Node* p = head;
    Node* q = p->next;
    while(p->next!=head)
    {
        p=p->next;
    }
    p->next = q;
    head = q;
    free(p);
    return head;
}

Node* cirdeletelast(Node* head)
{
    Node* p = head;
    Node* q = p->next;
    while(q->next!=head){
        q = q->next;
        p = p->next;
    }
    p->next = head;
    free(q);
    return head;
}



int main()
{
    Node* head = new Node;
     Node* first = new Node;
     Node* second = new Node;
     Node* third = new Node;
     
     head->data = 17;
     head->next = first;
     
      first->data = 897;
     first->next = second;
     
      second->data = 237;
     second->next = third;
     
      third->data = 27;
     third->next = head;
     
   // head =  Insertend(head,34);
   // head = deletefront(head);
    //traversal(head);
    cout<<"the element is:"<<endl;
   // head = deletevalue(head,237);
   // head = deletelast(head);
   // head = deleteindex(head, 2);
   //head = cirinsertlast(head, 100);
   //head = cirinsertathead(head, 123399);
    //head = cirinsertindex(head , 34, 3);
    //head = cirinsertafterval(head,third,222);
    //head = cirdeletehead(head);
    head = cirdeletelast(head);
    cirtraversal(head);
    

     
    
    return 0;
}


 



