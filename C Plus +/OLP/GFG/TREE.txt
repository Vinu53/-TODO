TREE:: ---------------------------------------------->>

Creation and Traversal::

Array represanetion is costly 

so prefrer linked representation not a linked list represantataion

#include <iostream>
using namespace std;

struct Node
{
    int data;
    Node* left;
    Node* right;
};

Node* createnode(int val)
{
    Node* ptr = new Node;
    ptr->data = val;
    ptr->left = NULL;
    ptr->right = NULL;
    return ptr;
}

void preorder(Node* n)
{
    if(n!=NULL)
    {
        cout<<n->data<<" ";
        preorder(n->left);
        preorder(n->right);
    }
    
}

void postorder(Node* n)
{
     if(n!=NULL)
     {
        postorder(n->left);
        postorder(n->right);
        cout<<n->data<<" ";
        
     }
}

void Inorder(Node* n)
{
     if(n!=NULL)
     {
        Inorder(n->left);
        cout<<n->data<<" ";
        Inorder(n->right);
        
        
     }
}



int main()
{
    Node* p = createnode(2);
    Node* p1 = createnode(1);
    Node* p2 = createnode(4);
    Node* p3 = createnode(44);
    Node* p4 = createnode(34);
    
    p->left = p1;
    p->right = p2;
    
    p1->left = p3;
    p1->right = p4;
    
    preorder(p);
    cout<<endl;
    postorder(p);
    cout<<endl;
    Inorder(p);
    
    return 0;
}


MAIN PROPERTY::

 if the inorder traversal of BT results in ascending order then the given tree is binary search tree
 finding the whetrer a given tree is BST or not
 
 #include<iostream>
using namespace std;

struct node{
    int data;
    struct node* left;
    struct node* right;
};

struct node* createNode(int data){
    struct node *n = new node; // creating a node pointer
    n->data = data; // Setting the data
    n->left = NULL; // Setting the left and right children to NULL
    n->right = NULL; // Setting the left and right children to NULL
    return n; // Finally returning the created node
}

void preOrder(struct  node* root){
    if(root!=NULL){
       cout<<root->data<<endl;
        preOrder(root->left);
        preOrder(root->right);
    }
}

void postOrder(struct  node* root){
    if(root!=NULL){
        postOrder(root->left);
        postOrder(root->right);
        cout<<root->data<<endl;
    }
}

void inOrder(struct  node* root){
    if(root!=NULL){
        inOrder(root->left);
        cout<<root->data<<endl;
        inOrder(root->right);
    }
}

int isBST(struct  node* root){
    static struct node *prev = NULL;
    if(root!=NULL){
        if(!isBST(root->left)){
            return 0;
        }
        if(prev!=NULL && root->data <= prev->data){
            return 0;
        }
        prev = root;
        return isBST(root->right);
    }
    else{
        return 1;
    }
}

int main(){
     
    // Constructing the root node - Using Function (Recommended)
    struct node *p = createNode(5);
    struct node *p1 = createNode(3);
    struct node *p2 = createNode(6);
    struct node *p3 = createNode(11);
    struct node *p4 = createNode(4);
    // Finally The tree looks like this:
    //      5
    //     / \
    //    3   6
    //   / \
    //  1   4  

    // Linking the root node with left and right children
    p->left = p1;
    p->right = p2;
    p1->left = p3;
    p1->right = p4;

    // preOrder(p);
    // printf("\n");
    // postOrder(p); 
    // printf("\n");
    inOrder(p);
    cout<<endl;
    // printf("%d", isBST(p)); 
    if(isBST(p)){
        cout<<"this is BST:"<<endl;
    }
    else{
        cout<<"this is not BST"<<endl;
    }
    return 0;
}

--------------------------------------------------------------------------------------------------------------------------
Searching elements in a binary search tree
#include<iostream>
using namespace std;

struct node{
    int data;
    struct node* left;
    struct node* right;
};

struct node* createNode(int data){
    struct node *n = new node; // creating a node pointer
    n->data = data; // Setting the data
    n->left = NULL; // Setting the left and right children to NULL
    n->right = NULL; // Setting the left and right children to NULL
    return n; // Finally returning the created node
}

void preOrder(struct  node* root){
    if(root!=NULL){
       cout<<root->data<<endl;
        preOrder(root->left);
        preOrder(root->right);
    }
}

void postOrder(struct  node* root){
    if(root!=NULL){
        postOrder(root->left);
        postOrder(root->right);
        cout<<root->data<<endl;
    }
}

void inOrder(struct  node* root){
    if(root!=NULL){
        inOrder(root->left);
        cout<<root->data<<endl;
        inOrder(root->right);
    }
}

int isBST(struct  node* root){
    static struct node *prev = NULL;
    if(root!=NULL){
        if(!isBST(root->left)){
            return 0;
        }
        if(prev!=NULL && root->data <= prev->data){
            return 0;
        }
        prev = root;
        return isBST(root->right);
    }
    else{
        return 1;
    }
}


int search(node* n)
{
    int val = 11;
    if(n!=NULL)
    {
        if(n->data == val)
        {
            cout<<"the no is found:"<<endl;
            return 1;
        }
        else if(n->data>val) 
        {
            search(n->left);
        }
        else
        {
            search(n->right);
        }
    }
    else
    {
        return 0;
    }
}

int main(){
     
    // Constructing the root node - Using Function (Recommended)
    struct node *p = createNode(5);
    struct node *p1 = createNode(3);
    struct node *p2 = createNode(6);
    struct node *p3 = createNode(1);
    struct node *p4 = createNode(4);
    // Finally The tree looks like this:
    //      5
    //     / \
    //    3   6
    //   / \
    //  1   4  

    // Linking the root node with left and right children
    p->left = p1;
    p->right = p2;
    p1->left = p3;
    p1->right = p4;

    cout<<search(p);
    return 0;
}
---------------------------------------------------------------------------------------------------------

Finding elements in a iterative method:
 
 -----------------------------------------------------------------------------------------------------------
Insertion in a Binary tree

#include<stdio.h>
#include<malloc.h>

struct node{
    int data;
    struct node* left;
    struct node* right;
};

struct node* createNode(int data){
    struct node *n; // creating a node pointer
    n = (struct node *) malloc(sizeof(struct node)); // Allocating memory in the heap
    n->data = data; // Setting the data
    n->left = NULL; // Setting the left and right children to NULL
    n->right = NULL; // Setting the left and right children to NULL
    return n; // Finally returning the created node
}

void preOrder(struct  node* root){
    if(root!=NULL){
        printf("%d ", root->data);
        preOrder(root->left);
        preOrder(root->right);
    }
}

void postOrder(struct  node* root){
    if(root!=NULL){
        postOrder(root->left);
        postOrder(root->right);
        printf("%d ", root->data);
    }
}

void inOrder(struct  node* root){
    if(root!=NULL){
        inOrder(root->left);
        printf("%d ", root->data);
        inOrder(root->right);
    }
}

int isBST(struct  node* root){
    static struct node *prev = NULL;
    if(root!=NULL){
        if(!isBST(root->left)){
            return 0;
        }
        if(prev!=NULL && root->data <= prev->data){
            return 0;
        }
        prev = root;
        return isBST(root->right);
    }
    else{
        return 1;
    }
}

struct node * searchIter(struct node* root, int key){
    while(root!=NULL){
        if(key == root->data){
            return root;
        }
        else if(key<root->data){
            root = root->left;
        }
        else{
            root = root->right;
        }
    }
    return NULL;
}

void insert(struct node *root, int key){
   struct node *prev = NULL;
   while(root!=NULL){
       prev = root;
       if(key==root->data){
           printf("Cannot insert %d, already in BST", key);
           return;
       }
       else if(key<root->data){
           root = root->left;
       }
       else{
           root = root->right;
       }
   }
   struct node* new = createNode(key);
   if(key<prev->data){
       prev->left = new;
   }
   else{
       prev->right = new;
   }

}

int main(){
     
    // Constructing the root node - Using Function (Recommended)
    struct node *p = createNode(5);
    struct node *p1 = createNode(3);
    struct node *p2 = createNode(6);
    struct node *p3 = createNode(1);
    struct node *p4 = createNode(4);
    // Finally The tree looks like this:
    //      5
    //     / \
    //    3   6
    //   / \
    //  1   4  

    // Linking the root node with left and right children
    p->left = p1;
    p->right = p2;
    p1->left = p3;
    p1->right = p4;

    insert(p, 16);
    printf("%d", p->right->right->data);
    return 0;
}
 ----------------------------------------------------------------------------------------
Deletion in a binary tree ::

1) Case1:   the node is a leaf node
2) case2:   the node is non leaf node
3) Case3:   the node is root node 


-------------------------------------------------------------------------------------------------------------

AVIAL Tree:'

it is height balanced binary search tree

We are doing LR and RR roataion to convert binary search tree to avial to improve the perfomance